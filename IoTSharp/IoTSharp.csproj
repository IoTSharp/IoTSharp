<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TargetFramework>net5.0</TargetFramework>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<IsPackable>false</IsPackable>
		<SpaRoot>ClientApp\</SpaRoot>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<!-- Set this to true if you enable server-side prerendering -->
		<BuildServerSideRenderer>false</BuildServerSideRenderer>

		<IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
		<IsTransformWebConfigDisabled>true</IsTransformWebConfigDisabled>
		<Company>MaiKebing</Company>
		<Product>IoTSharp</Product>
		<Authors>Maikebing</Authors>
		<PackageProjectUrl>https://github.com/IoTSharp/IoTSharp</PackageProjectUrl>
		<RepositoryUrl>https://github.com/IoTSharp/IoTSharp</RepositoryUrl>
		<PackageReleaseNotes>Open-source IoT Platform - Device management, data collection, processing and visualization.   https://www.iotsharp.net</PackageReleaseNotes>
		<Description>Open-source IoT Platform - Device management, data collection, processing and visualization.</Description>
		<PackageId>IoTSharp</PackageId>
		<UserSecretsId>18970590-05bf-4a1f-a70b-3c8a120d12cb</UserSecretsId>
		<Version>1.6.0</Version>
		<RepositoryType>git</RepositoryType>
		<PackageTags>IoT</PackageTags>
		<ApplicationIcon>Resources\Logo.ico</ApplicationIcon>
		<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
		<DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<IsPackable>true</IsPackable>
		<PackageLicenseExpression></PackageLicenseExpression>
		<Copyright>Copyright 2018-2020  Yanhong Ma</Copyright>
		<AssemblyVersion>1.6.0.0</AssemblyVersion>
		<FileVersion>1.6.0.0</FileVersion>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
		<PackageIcon>96x96.png</PackageIcon>
		<TypeScriptModuleKind>system</TypeScriptModuleKind>
		
		
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
		<DocumentationFile>IoTSharp.xml</DocumentationFile>
		<NoWarn>1701;1702;1591</NoWarn>
		<OutputPath></OutputPath>
	</PropertyGroup>
	<ItemGroup>

		<PackageReference Include="AspNetCore.HealthChecks.Kafka" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.MongoDb" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.Network" Version="5.0.4" />
		<PackageReference Include="AspNetCore.HealthChecks.Rabbitmq" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.Redis" Version="5.0.2" />
		<PackageReference Include="AspNetCore.HealthChecks.System" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.UI" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.UI.Client" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.Uris" Version="5.0.1" />
		<PackageReference Include="AspNetCore.HealthChecks.Network" Version="5.0.4" />
		<PackageReference Include="CAP.Extensions" Version="1.0.32" />
		<PackageReference Include="DotNetCore.CAP" Version="5.1.4" />
		<PackageReference Include="DotNetCore.CAP.Dashboard" Version="5.1.4" />
		<PackageReference Include="DotNetCore.CAP.InMemoryStorage" Version="5.1.4" />
		<PackageReference Include="DotNetCore.CAP.Kafka" Version="5.1.4" />
		<PackageReference Include="DotNetCore.CAP.MongoDB" Version="5.1.4" />
		<PackageReference Include="DotNetCore.CAP.RabbitMQ" Version="5.1.4" />
		<PackageReference Include="DotNetCore.CAP.PostgreSql" Version="5.1.4" />
		<PackageReference Include="EasyCaching.Core" Version="1.4.1" />
		<PackageReference Include="EasyCaching.InMemory" Version="1.4.1" />
		<PackageReference Include="EasyCaching.LiteDB" Version="1.4.1" />
		<PackageReference Include="EasyCaching.Redis" Version="1.4.1" />
		<PackageReference Include="hyjiacan.pinyin4net" Version="4.1.0" />
		<PackageReference Include="InfluxDB.Client" Version="3.1.0" />
		<PackageReference Include="IoTSharp.CoAP.NET" Version="2.0.8" />
		<PackageReference Include="IoTSharp.X509Extensions" Version="1.4.27" />
		<PackageReference Include="kimbus" Version="2.0.1" />
		<PackageReference Include="LiteDB" Version="5.0.11" />
		<PackageReference Include="MaiKeBing.CAP.ZeroMQ" Version="1.0.32" />
		<PackageReference Include="MaiKeBing.CAP.LiteDB" Version="1.0.32" />
		<PackageReference Include="Maikebing.Data.Taos" Version="2.0.357" />
		<PackageReference Include="Maikebing.HealthChecks.Taos" Version="2.0.357" />
		<PackageReference Include="MaiKeBing.HostedService.ZeroMQ" Version="1.0.32" />
		<PackageReference Include="Microsoft.AspNetCore.Http.Features" Version="5.0.11" />
		<PackageReference Include="Microsoft.Extensions.Options" Version="5.0.0" />
		<PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.11.1" />
		<PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="5.0.2" />
		<PackageReference Include="MQTTnet" Version="3.0.16" />
		<PackageReference Include="MQTTnet.AspNetCore" Version="3.0.16" />
		<PackageReference Include="MQTTnet.AspNetCoreEx" Version="3.0.15" />
		<PackageReference Include="MQTTnet.Extensions.Rpc" Version="3.0.16" />
		<PackageReference Include="NetMQ" Version="4.0.1.6" />
		<PackageReference Include="NSwag.AspNetCore" Version="13.13.2" />
		<PackageReference Include="PinusDB" Version="1.0.10" />
		<PackageReference Include="PinusDB.HealthChecks" Version="1.0.10" />
		<PackageReference Include="ProxyKit" Version="2.3.4" />
		<PackageReference Include="Quartz.Serialization.Json" Version="3.3.3" />
		<PackageReference Include="RulesEngine" Version="3.4.0" />
		<PackageReference Include="Savorboard.CAP.InMemoryMessageQueue" Version="5.1.1" />
		<PackageReference Include="Silkier" Version="1.0.424" />
		<PackageReference Include="Silkier.AspNetCore" Version="1.0.424" />
		<PackageReference Include="Silkier.EFCore" Version="1.0.424" />
		<PackageReference Include="SilkierQuartz" Version="5.0.309" />
		<PackageReference Include="SilkierQuartz.Plugins.RecentHistory" Version="5.0.309" />
		<PackageReference Include="System.CodeDom" Version="5.0.0" />
		<PackageReference Include="System.Collections" Version="4.3.0" />
		<PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="6.13.1" />
		<PackageReference Include="System.ServiceModel.Primitives" Version="4.8.1" />
		<PackageReference Include="System.Text.Encoding.CodePages" Version="5.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="5.0.11" />
		<PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="5.0.11" />
		<PackageReference Include="Microsoft.AspNetCore.Hosting.WindowsServices" Version="5.0.11" />
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.11" />
		<PackageReference Include="Microsoft.Extensions.Hosting" Version="5.0.0" />
		<PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="5.0.0" />
		<PackageReference Include="Microsoft.Extensions.Hosting.WindowsServices" Version="5.0.1" />
		<PackageReference Include="MQTTnet.Extensions.ManagedClient" Version="3.0.17" />
		<PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="5.0.11" />
		<PackageReference Include="Microsoft.AspNetCore.ApiAuthorization.IdentityServer" Version="5.0.11" />
		<PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="5.0.11" />
		<PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="5.0.11" />
		<PackageReference Include="Microsoft.AspNetCore.Identity.UI" Version="5.0.11" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="5.0.11" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="5.0.11" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="5.0.11">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		
	</ItemGroup>
	<ItemGroup>
		 
		<Compile Remove="Migrations\**" />
 
		<Content Remove="Migrations\**" />
	 
		<EmbeddedResource Remove="Migrations\**" />
	 
		<None Remove="Migrations\**" />
		<Content Remove="wwwroot\lib\jquery-validation-unobtrusive\LICENSE.txt" />
		<Content Remove="wwwroot\lib\jquery\LICENSE.txt" />
		<None Remove=".gitignore" />
		<None Remove="healthchecksdb" />
		<None Remove="healthchecksdb-shm" />
		<None Remove="health_checks.db" />
		<None Remove="IoTSharp.db" />
		<None Remove="IoTSharp.xml" />
		<None Remove="TelemetryStorage.db" />
		<_WebToolingArtifacts Remove="Properties\PublishProfiles\registry.hub.docker.com_iotsharp.pubxml" />
		<None Include="..\docs\images\96x96.png">
		  <Pack>True</Pack>
		  <PackagePath></PackagePath>
		</None>
		<None Include="..\LICENSE.txt">
		  <Pack>True</Pack>
		  <PackagePath></PackagePath>
		</None>
		<None Include="wwwroot\fonts\fontawesome-webfont.svg" />
		<None Include="wwwroot\fonts\glyphicons-halflings-regular.woff2" />
	</ItemGroup>
	
	<ItemGroup>
		<!-- Don't publish the SPA source files, but do show them in the project files list -->
		<Content Remove="$(SpaRoot)**" />
		<None Remove="$(SpaRoot)**" />
		<None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
	</ItemGroup>

	<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
	</Target>

	<Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod --aot" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod --aot" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
			<DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>%(DistFiles.Identity)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
				<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>
	<ItemGroup>
	  <ProjectReference Include="..\IoTSharp.Data.MySQL\IoTSharp.Data.MySQL.csproj" />
	  <ProjectReference Include="..\IoTSharp.Data.Oracle\IoTSharp.Data.Oracle.csproj" />
	  <ProjectReference Include="..\IoTSharp.Data.PostgreSQL\IoTSharp.Data.PostgreSQL.csproj" />
	  <ProjectReference Include="..\IoTSharp.Data.Sqlite\IoTSharp.Data.Sqlite.csproj" />
	  <ProjectReference Include="..\IoTSharp.Data.SqlServer\IoTSharp.Data.SqlServer.csproj" />
	  <ProjectReference Include="..\IoTSharp.Data\IoTSharp.Data.csproj" />
	  <ProjectReference Include="..\IoTSharp.Interpreter\IoTSharp.Interpreter.csproj" />
	  <ProjectReference Include="..\IoTSharp.TaskAction\IoTSharp.TaskAction.csproj" />
	</ItemGroup>
	<ItemGroup>
	  <Folder Include="ClientApp\" />
	</ItemGroup>
	<ProjectExtensions><VisualStudio><UserProperties clientapp_4package_1json__JsonSchema="" /></VisualStudio></ProjectExtensions>
</Project>
